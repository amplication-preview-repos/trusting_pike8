/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Collection as PrismaCollection } from "@prisma/client";

export class CollectionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CollectionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.collection.count(args);
  }

  async collections<T extends Prisma.CollectionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CollectionFindManyArgs>
  ): Promise<PrismaCollection[]> {
    return this.prisma.collection.findMany<Prisma.CollectionFindManyArgs>(args);
  }
  async collection<T extends Prisma.CollectionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CollectionFindUniqueArgs>
  ): Promise<PrismaCollection | null> {
    return this.prisma.collection.findUnique(args);
  }
  async createCollection<T extends Prisma.CollectionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CollectionCreateArgs>
  ): Promise<PrismaCollection> {
    return this.prisma.collection.create<T>(args);
  }
  async updateCollection<T extends Prisma.CollectionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CollectionUpdateArgs>
  ): Promise<PrismaCollection> {
    return this.prisma.collection.update<T>(args);
  }
  async deleteCollection<T extends Prisma.CollectionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CollectionDeleteArgs>
  ): Promise<PrismaCollection> {
    return this.prisma.collection.delete(args);
  }
}
