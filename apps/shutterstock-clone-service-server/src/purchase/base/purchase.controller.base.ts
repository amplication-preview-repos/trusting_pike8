/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PurchaseService } from "../purchase.service";
import { PurchaseCreateInput } from "./PurchaseCreateInput";
import { Purchase } from "./Purchase";
import { PurchaseFindManyArgs } from "./PurchaseFindManyArgs";
import { PurchaseWhereUniqueInput } from "./PurchaseWhereUniqueInput";
import { PurchaseUpdateInput } from "./PurchaseUpdateInput";

export class PurchaseControllerBase {
  constructor(protected readonly service: PurchaseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Purchase })
  async createPurchase(
    @common.Body() data: PurchaseCreateInput
  ): Promise<Purchase> {
    return await this.service.createPurchase({
      data: {
        ...data,

        image: data.image
          ? {
              connect: data.image,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        amount: true,
        createdAt: true,
        id: true,

        image: {
          select: {
            id: true,
          },
        },

        paymentDate: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Purchase] })
  @ApiNestedQuery(PurchaseFindManyArgs)
  async purchases(@common.Req() request: Request): Promise<Purchase[]> {
    const args = plainToClass(PurchaseFindManyArgs, request.query);
    return this.service.purchases({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        id: true,

        image: {
          select: {
            id: true,
          },
        },

        paymentDate: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Purchase })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async purchase(
    @common.Param() params: PurchaseWhereUniqueInput
  ): Promise<Purchase | null> {
    const result = await this.service.purchase({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        id: true,

        image: {
          select: {
            id: true,
          },
        },

        paymentDate: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Purchase })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePurchase(
    @common.Param() params: PurchaseWhereUniqueInput,
    @common.Body() data: PurchaseUpdateInput
  ): Promise<Purchase | null> {
    try {
      return await this.service.updatePurchase({
        where: params,
        data: {
          ...data,

          image: data.image
            ? {
                connect: data.image,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          amount: true,
          createdAt: true,
          id: true,

          image: {
            select: {
              id: true,
            },
          },

          paymentDate: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Purchase })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePurchase(
    @common.Param() params: PurchaseWhereUniqueInput
  ): Promise<Purchase | null> {
    try {
      return await this.service.deletePurchase({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          id: true,

          image: {
            select: {
              id: true,
            },
          },

          paymentDate: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
